openapi: 3.0.3
info:
  title: Coinway Integration API
  description: |-
    Coinway is a peer-to-peer crypto payment gateway designed for seamless integration into e-commerce platforms, allowing merchants to accept cryptocurrency payments directly. To use Coinway, merchants must have a digital wallet address for receiving crypto payments, as Coinway itself does not hold or manage funds. For merchants interested in converting digital assets to fiat, Coinway partners with licensed and registered crypto exchanges and can facilitate introductions. However, please be aware that merchants must meet the compliance requirements of the chosen exchange. Coinway also supports self-custodial wallet options; our team is available to discuss these choices to suit your needs.

  termsOfService: http://qidigital.com/terms/
  contact:
    email: dev@qidigital.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

servers:
  - url: https://test.coinway.io/api
  - url: https://demo.coinway.io/api
tags:
  - name: HealthCheck
  - name: Invoice
paths:
  /healthcheck:
    get:
      tags:
       - HealthCheck
      summary: Check the health of API
      description: Check the health of API
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
                
  /invoice:
    get:
      security:
        - BearerAuth: []
      tags:
        - Invoice
      summary: Retrieves invoice information
      description: Retrieves invoice information 
      responses:
        '200':
          description: Get all invoices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceall'
    post:
      security:
        - BearerAuth: []
      tags:
        - Invoice
      summary: Create a new invoice or payment request
      description: Creating an invoice or payment request with a base fiat currency, i.e. USD
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoice'
            examples:
              For New Customer:
                value:
                  currency: USD
                  customer:
                    name : John Doe
                    email : john.doe@email.com
                  items:
                    - description: My Item 1
                      amount : 22
                    - description: My Item 2
                      amount : 22
              Existing Customer:
                value:
                  currency: USD
                  customer:
                    id : c_65da6de9813e9
                  items:
                    - description: My Item 1
                      amount : 22
                    - description: My Item 2
                      amount : 22
              Guest Customer:
                value:
                  currency: USD
                  items:
                    - description: My Item 1
                      amount : 22
      responses:
        '200':
          description: Invoice successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoice'
  /invoice/{invoiceId}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Invoice
      summary: Invoice details
      description: Retrieves invoice or payment request information, including ID.
      parameters:
        - name: invoiceId
          in: path
          description:  Unique Invoice Id
          required: true
          schema:
            type: string
            example: p_65e36f37481a6
      responses:
        '200':
          description: Invoice ID and details successfully generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoice'
components:
  schemas:
    Health:
      type: object
      properties:
        status:
          type: string
          example: ok
    item:
      type : object
      properties:
        description:
          type : string
          example: Item Name
        amount:
          type: number
          example : 10.4
    customer: 
      type: object
      properties:
        name: 
          type: string
          example: John
        email: 
          type: string
          example : john@email.com
    invoice:
      type: object
      required: 
        - currency
        - customer
        - items
      properties:
        currency: 
          type: string
          example: USD
        customer: 
          $ref: '#/components/schemas/customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/item'
        success_url: # Optional property
          type : string
          example: https://yourdomain.com/payment/success
        cancel_url:
          type: string
          example: https://yourdomain.com/payment/cancel
    invoiceall:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        data:
          type: array
          items: 
            $ref: '#/components/schemas/invoice'
        first_page_url:
          type: string
          format: url
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 1
        last_page_url:
          type: string
          format: url
        links:
          type: array
          items:
            $ref: '#/components/schemas/links'
        next_page_url:
          type: string
          example: null
        path:
          type: string
          format: url
        per_page:
          type: integer
          example: 15
        prev_page_url:
          type: string
          example: null
        to:
          type: integer
          example: 2
        total:
          type: integer
          example: 2
    links:
      type: object
      properties:
        url:
          type: string
          format: url
        label:
          type: string
          example: "&laquo; Previous"
        active:
          type: boolean
          example: false
  securitySchemes:
    BearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
